[{"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\index.js":"1","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\reportWebVitals.js":"2","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\App.js":"3","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\context\\reducer.js":"4","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\services\\notify.js":"5","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\utils\\theme.js":"6","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\context\\index.js":"7","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\context\\action.js":"8","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\header.jsx":"9","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\dashboard.jsx":"10","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\login.jsx":"11","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\register.jsx":"12","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\services\\apiservice.js":"13","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\book.jsx":"14","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\orders.jsx":"15","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\utils\\constants.js":"16","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\addBook.jsx":"17","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\purchaseBook.jsx":"18","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\borrowBook.jsx":"19","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\paymentGateway.jsx":"20","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\loans.jsx":"21","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\paypall.jsx":"22"},{"size":472,"mtime":1607924696000,"results":"23","hashOfConfig":"24"},{"size":375,"mtime":1607843844000,"results":"25","hashOfConfig":"24"},{"size":2032,"mtime":1607936291963,"results":"26","hashOfConfig":"24"},{"size":1136,"mtime":1608046145833,"results":"27","hashOfConfig":"24"},{"size":1518,"mtime":1607843844000,"results":"28","hashOfConfig":"24"},{"size":114,"mtime":1607843844000,"results":"29","hashOfConfig":"24"},{"size":83,"mtime":1608037741956,"results":"30","hashOfConfig":"24"},{"size":773,"mtime":1608046172742,"results":"31","hashOfConfig":"24"},{"size":6046,"mtime":1608047877454,"results":"32","hashOfConfig":"24"},{"size":9799,"mtime":1608048071177,"results":"33","hashOfConfig":"24"},{"size":5986,"mtime":1607924696000,"results":"34","hashOfConfig":"24"},{"size":9305,"mtime":1607924696000,"results":"35","hashOfConfig":"24"},{"size":3974,"mtime":1608051033411,"results":"36","hashOfConfig":"24"},{"size":3568,"mtime":1607968073662,"results":"37","hashOfConfig":"24"},{"size":3362,"mtime":1607937039736,"results":"38","hashOfConfig":"24"},{"size":1862,"mtime":1607827205784,"results":"39","hashOfConfig":"24"},{"size":9409,"mtime":1607925870000,"results":"40","hashOfConfig":"24"},{"size":5626,"mtime":1608037741930,"results":"41","hashOfConfig":"24"},{"size":5415,"mtime":1607924696000,"results":"42","hashOfConfig":"24"},{"size":2215,"mtime":1608050674493,"results":"43","hashOfConfig":"24"},{"size":3367,"mtime":1608049363983,"results":"44","hashOfConfig":"24"},{"size":1645,"mtime":1608046420495,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"twlnfm",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"48"},"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\index.js",[],["101","102"],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\reportWebVitals.js",[],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\App.js",[],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\context\\reducer.js",[],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\services\\notify.js",[],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\utils\\theme.js",[],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\context\\index.js",[],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\context\\action.js",[],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\header.jsx",[],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\dashboard.jsx",["103","104"],"import React,{useState, useEffect, useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Header from './header';\r\nimport Book from './book';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { getApi } from '../services/apiservice';\r\nimport AddBook from './addBook';\r\nimport PurchaseBook from './purchaseBook';\r\nimport BorrowBook from './borrowBook';\r\nimport Paymentgateway from './paymentGateway';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport {stateContext} from '../context';\r\nimport {setIsLoading, setPaymentOpen} from '../context/action'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n/**\r\n * Dashboard component styles decleration\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  bookContainer:{\r\n    display: 'grid',\r\n    gridColumnGap: '30px',\r\n    gridRowGap: '30px',\r\n    gridTemplateColumns: 'repeat(auto-fill,minmax(300px,1fr))',\r\n    padding: '10px'\r\n  },\r\n  book:{\r\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n    textAlign:'center'\r\n  },\r\n  action:{\r\n    display:'flex',\r\n    flexDirection:'row',\r\n    padding:\"10px 10px\",\r\n    alignItems:\"center\",\r\n    justifyContent:\"space-between\",\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  leftaction:{\r\n    flexBasis:\"50%\",\r\n    position:'relative'\r\n  },\r\n  rightaction:{\r\n    flexBasis: \"20%\",\r\n    display:\"flex\",\r\n    alignItems:\"center\",\r\n    justifyContent:\"space-between\"\r\n  },\r\n  search:{\r\n    position:\"absolute\",\r\n    right: 0,\r\n    top: \"10px\",\r\n    cursor:\"pointer\"\r\n  },\r\n  noBooks:{\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    height: \"30vh\",\r\n    alignItems: \"center\",\r\n  }\r\n }));\r\n\r\n /**\r\n  * Dashborad functional component decleration\r\n  */\r\nexport default function Dashborad() {\r\n  // variable get and set method decleartion using useState\r\n  const classes = useStyles();\r\n  const [isAddBookOpen, setisAddBookOpen] = useState(false);\r\n  const [isBorrowBookOpen, setIsBorrowBookOpen] = useState(false);\r\n  const [isPurchaseBookOpen, setIsPurchaseBookOpen] = useState(false);\r\n  const [purchaseBook, setpurchaseBook] = useState(null);\r\n  const [borrowBook, setborrowBook] = useState(null);\r\n  const [books, setBooks] = useState([]);\r\n  const [displayBooks, setDisplayBooks] = useState([]);\r\n  const [category, setcategory] = useState(-1);\r\n  const [listOfCategories, setListOfCategories] = useState([]);\r\n  const [searchTitle, setsearchTitle] = useState('');\r\n  const [searchAuthor, setsearchAuthor] = useState('');\r\n  const context = useContext(stateContext);\r\n\r\n  /**\r\n   * Method to fetch books\r\n   */\r\n  const fetchBooks=()=>{\r\n    getApi('GetBook')\r\n    .then(response=>{\r\n      setBooks(response);\r\n      setDisplayBooks(response);\r\n      context.dispatch(setIsLoading(false));\r\n    },error => {\r\n      console.log(error);\r\n      context.dispatch(setIsLoading(false));\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Method to fetch all categories\r\n   */\r\n  const fetchBooksCategories=()=>{\r\n    getApi('GetAllCategories')\r\n    .then(response=>{\r\n      setListOfCategories(response);\r\n    },error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Useffect method is invoked when component is loaded\r\n   * It fetches books and categories\r\n   */\r\n  useEffect(() => {\r\n    context.dispatch(setIsLoading(true));\r\n    fetchBooks();\r\n    fetchBooksCategories();\r\n  }, []);\r\n\r\n  /**\r\n   * This useEffect method is invoked when component is loaded and when their is change in category\r\n   * Based on which the books will be loaded\r\n   */\r\n  useEffect(() => {\r\n    if(category===-1){\r\n      setDisplayBooks(books);\r\n    } else{\r\n      const filteredBooks=books.filter(item=>item.catId=== category);\r\n      context.dispatch(setIsLoading(false));\r\n      setDisplayBooks(filteredBooks);\r\n    }\r\n  }, [category]);\r\n\r\n\r\n  /**\r\n   * Method to open addnew book popup\r\n   * Only for admin user\r\n   */\r\n  const addNewBook=()=>{\r\n    setisAddBookOpen(true);\r\n  }\r\n\r\n  /**\r\n   * Method to purchase book only for store owner\r\n   * @param {*} argBook \r\n   */\r\n  const purchaseBookOpen=(argBook)=>{\r\n    setpurchaseBook(argBook);\r\n    setIsPurchaseBookOpen(true);\r\n  }\r\n\r\n  /**\r\n   * Method to open borrow book and only for students\r\n   * @param {*} argBook \r\n   */\r\n  const borrowBookOpen=(argBook)=>{\r\n    setborrowBook(argBook)\r\n    setIsBorrowBookOpen(true);\r\n  }\r\n\r\n  /**\r\n   * Method to close Addnew book popup\r\n   */\r\n  const closeAddNewBook=()=>{\r\n    setisAddBookOpen(false);\r\n    fetchBooks();\r\n    context.dispatch(setIsLoading(false));\r\n  }\r\n\r\n  /**\r\n   * Method to close purchase book popup\r\n   */\r\n    const closePurchaseBook=(arg)=>{\r\n      if(arg) {\r\n        context.dispatch(setPaymentOpen(true));\r\n      }\r\n      setIsPurchaseBookOpen(false);\r\n      setpurchaseBook(null);\r\n      context.dispatch(setIsLoading(false));\r\n  }\r\n\r\n  /**\r\n   * Method to close borrow book popup\r\n   */\r\n  const closeBorrowBook=()=>{\r\n    setIsBorrowBookOpen(false);\r\n    setborrowBook( );\r\n    context.dispatch(setIsLoading(false));\r\n  }\r\n\r\n  const closePayment=()=>{\r\n    context.dispatch(setIsLoading(false));\r\n  }\r\n\r\n  /**\r\n   * Method to handle change in category\r\n   * @param {*} argEvent \r\n   */\r\n  const handleChangeInCategory=(argEvent)=>{\r\n    setcategory(argEvent.target.value);\r\n  }\r\n\r\n  const searchBooks= async ()=>{\r\n      if(searchTitle || searchAuthor){\r\n        try{\r\n            context.dispatch(setIsLoading(true));\r\n            const url=`GetBookByNameOrAuthor?name=${searchTitle}&author=${searchAuthor}`;\r\n            const response= await getApi(url);\r\n            setBooks(response);\r\n            if(category!==-1){\r\n              const filteredBooks=response.filter(item=>item.catId=== category);\r\n              setDisplayBooks(filteredBooks);\r\n            } else{\r\n              setDisplayBooks(response);\r\n            }\r\n            context.dispatch(setIsLoading(false));\r\n        } catch(error){\r\n          context.dispatch(setIsLoading(false));\r\n        }\r\n      }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header/>\r\n      <div className={classes.action}>\r\n            <div className={classes.leftaction}>\r\n            <Grid container spacing={2}>\r\n                    <Grid item xs={5} sm={5}>\r\n                      <TextField\r\n                        name=\"searcgTitle\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"searcgTitle\"\r\n                        onKeyPress={event => event.key === 'Enter'?searchBooks(event):null }\r\n                        value={searchTitle}\r\n                        onChange={(e)=>setsearchTitle(e.target.value)}\r\n                        label=\"Book title\"\r\n                      />\r\n                    </Grid>\r\n                  <Grid item xs={6} sm={6}>\r\n                      <TextField\r\n                        name=\"searchAuthor\"\r\n                        required\r\n                        fullWidth\r\n                        onKeyPress={event => event.key === 'Enter'?searchBooks(event):null}\r\n                        id=\"searchAuthor\"\r\n                        value={searchAuthor}\r\n                        onChange={(e)=>setsearchAuthor(e.target.value)}\r\n                        label=\"Author\"\r\n                      />\r\n                  </Grid>\r\n              </Grid>\r\n              <SearchIcon className={classes.search}/>\r\n            </div>\r\n            <div className={classes.rightaction}>\r\n                <FormControl className={classes.formControl}>\r\n                <InputLabel id=\"demo-simple-select-label\">Category</InputLabel>\r\n                  <Select\r\n                    labelId=\"demo-simple-select-label\"\r\n                    id=\"demo-simple-select\"\r\n                    value={category}\r\n                    onChange={handleChangeInCategory}\r\n                  >\r\n                    <MenuItem value={-1}>All</MenuItem>\r\n                    {\r\n                      listOfCategories.length>0 && listOfCategories.map((item,index)=>(\r\n                        <MenuItem key={`Book-${item.catId}-${index}`} value={item.catId}>{item.name}</MenuItem>\r\n                      ))\r\n                    }\r\n                  </Select>\r\n              </FormControl>\r\n              {localStorage.getItem('role')==='3'?(  <Button variant=\"contained\" color=\"primary\" disableElevation onClick={addNewBook}>\r\n                  Add new Book\r\n                </Button>):(\"\")}\r\n          </div>\r\n      </div>\r\n      \r\n        {displayBooks.length>0?\r\n        (\r\n          <div className={classes.bookContainer}>\r\n            {\r\n              displayBooks.map((item,index)=>(\r\n                  <div key={`Book-${item.id}-${index}`} className={classes.book}>\r\n                    <Book book={item} \r\n                          purchaseBook={purchaseBookOpen} \r\n                          borrowBook={borrowBookOpen}/>\r\n                  </div>\r\n              ))}\r\n          </div>):(\r\n          <div className={classes.noBooks}>\r\n            <h3>No books found</h3>\r\n          </div>)}\r\n      {isAddBookOpen?(<AddBook isOpen={isAddBookOpen} close={closeAddNewBook}/>):(\"\")}\r\n      {isPurchaseBookOpen && purchaseBook?(<PurchaseBook isOpen={isPurchaseBookOpen} close={closePurchaseBook} book={purchaseBook}/>):(\"\")}\r\n      {isBorrowBookOpen && borrowBook?(<BorrowBook isOpen={isBorrowBookOpen} close={closeBorrowBook} book={borrowBook}/>):(\"\")}\r\n      {context.state.paymentOpen ?(<Paymentgateway isOpen={context.state.paymentOpen} close={closePayment}/>):(\"\")}\r\n\r\n    </React.Fragment>\r\n  );\r\n}\r\n","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\login.jsx",[],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\register.jsx",["105"],"import React,{useState, useContext} from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport {postApi} from '../services/apiservice';\r\nimport { Link } from \"react-router-dom\";\r\nimport {stateContext} from '../context';\r\nimport {setIsLoading} from '../context/action'\r\n\r\n\r\n/**\r\n * styles for register component\r\n */\r\nconst useStyles = makeStyles(theme => ({\r\n  \"@global\": {\r\n    body: {\r\n      backgroundColor: theme.palette.common.white\r\n    }\r\n  },\r\n  main:{\r\n    height: \"100%\",\r\n    alignItems: \"center\",\r\n    display: \"flex\"\r\n  },\r\n  paper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\"\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3)\r\n  },\r\n  fields: {\r\n    backgroundColor: '#FFFFFF',\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    position: \"absolute\"\r\n  },\r\n  signup: {\r\n    margin: theme.spacing(5,0,0)\r\n  },\r\n  formControl:{\r\n    width:\"100%\"\r\n  }\r\n}));\r\n\r\n/**\r\n * Register component declartion\r\n * @param {*} param0 \r\n */\r\nexport default function SignUp({history}) {\r\n  // Variable declartion like email,password,fullname, cnumber, roleType,cardDetails and context\r\n  const classes = useStyles();\r\n  const [emailId, setEmailId] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [fullName, setFullName] = useState('');\r\n  const [cnumber, setContactNo] = useState('');\r\n  const [inValidEmail, setInValidEmail] = useState('');\r\n  const [roleType, setRoleType] = useState('');\r\n  const [cardDetail, setCardDetail] = useState('');\r\n  const context = useContext(stateContext);\r\n\r\n  /**\r\n   * Method to register user by submitting the form\r\n   * @param {*} event \r\n   */\r\n  const registerUser= async (event)=>{\r\n    event.preventDefault();\r\n    try{\r\n        context.dispatch(setIsLoading(true));\r\n        const user={\r\n            FullName:fullName,\r\n            Email:emailId,\r\n            Password:password,\r\n            ContactNumber:cnumber,\r\n            CardDetail:cardDetail,\r\n            RoleType:roleType\r\n          };\r\n        const response= await postApi('SaveUser',user);\r\n        context.dispatch(setIsLoading(false));\r\n        history.push('/login');\r\n    } catch(error){\r\n      context.dispatch(setIsLoading(false));\r\n    }\r\n  }\r\n\r\n/**\r\n * method to validate email\r\n * @param {*} event \r\n */\r\n const onEmailChange=(event)=> {\r\n    if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(event.target.value)){\r\n      setInValidEmail(\"\");\r\n    } else {\r\n      setInValidEmail('Invalid Email format');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * method to change in role type\r\n   * @param {*} event \r\n   */\r\n  const handleChangeInroleType = (event) => {\r\n    setRoleType(event.target.value);\r\n  };\r\n\r\n  return (\r\n      <React.Fragment>\r\n            <Container component=\"main\" maxWidth=\"xs\" className={classes.main}>\r\n              <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                  <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                  SignUp\r\n                </Typography>\r\n                {/* form for registering user */}\r\n                <form className={classes.form} onSubmit={registerUser}>\r\n                  <Grid container spacing={2}>\r\n                    {/* full name field */}\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        autoComplete=\"fname\"\r\n                        name=\"Full Name\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"Full Name\"\r\n                        placeholder=\"Full Name\"\r\n                        value={fullName}\r\n                        onChange={(e)=>setFullName(e.target.value)}\r\n                        autoFocus\r\n                      />\r\n                    </Grid>\r\n                    {/* email field */}\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        className={classes.fields}\r\n                        required\r\n                        fullWidth\r\n                        id=\"email\"\r\n                        placeholder=\"Email Address\"\r\n                        name=\"email\"\r\n                        error={inValidEmail}\r\n                        helperText={inValidEmail}\r\n                        onBlur={onEmailChange}\r\n                        value={emailId}\r\n                        onChange={(e)=>setEmailId(e.target.value)}\r\n                        autoComplete=\"email\"\r\n                      />\r\n                    </Grid>\r\n                    {/* passowrd field */}\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        autoComplete=\"password\"\r\n                        name=\"Password\"\r\n                        type=\"password\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"Password\"\r\n                        placeholder=\"Password\"\r\n                        value={password}\r\n                        onChange={(e)=>setPassword(e.target.value)}\r\n                      />\r\n                    </Grid>\r\n                    {/* contact field */}\r\n                   <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        className={classes.fields}\r\n                        required\r\n                        fullWidth\r\n                        id=\"contact\"\r\n                        placeholder=\"Contact Number\"\r\n                        name=\"contact\"\r\n                        autoComplete=\"cnumber\"\r\n                        value={cnumber}\r\n                        onChange={(e)=>setContactNo(e.target.value)}\r\n                      />\r\n                    </Grid>\r\n                    {/* card details field */}\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        variant=\"outlined\"\r\n                        className={classes.fields}\r\n                        required\r\n                        fullWidth\r\n                        name=\"cardDetail\"\r\n                        placeholder=\"Card Details\"\r\n                        type=\"text\"\r\n                        id=\"cardDetail\"\r\n                        autoComplete=\"current-cardDetail\"\r\n                        value={cardDetail}\r\n                        onChange={(e)=>setCardDetail(e.target.value)}\r\n                      />\r\n                    </Grid>\r\n                    {/* User Type field */}\r\n                    <Grid item xs={12} sm={12}>\r\n                        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                            <InputLabel id=\"demo-simple-select-outlined-label\">User Type</InputLabel>\r\n                            <Select\r\n                              labelId=\"demo-simple-select-outlined-label\"\r\n                              id=\"demo-simple-select-outlined\"\r\n                              value={roleType}\r\n                              onChange={handleChangeInroleType}\r\n                              label=\"User Type\"\r\n                            >\r\n                              <MenuItem value={1}>Student</MenuItem>\r\n                              <MenuItem value={2}>Store Owner</MenuItem>\r\n                              <MenuItem value={3}>Admin</MenuItem>\r\n                            </Select>\r\n                          </FormControl>\r\n                    </Grid>\r\n                  </Grid>\r\n                  {/* Signup button */}\r\n                  <Button\r\n                    type=\"submit\"\r\n                    smallSize\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                    disabled={!emailId || !password || !fullName || !roleType || !cnumber}\r\n                  >\r\n                    Sign Up\r\n                  </Button>\r\n                  {/* Link to login screen */}\r\n                  <Grid container className={classes.signup} justify=\"flex-end\">\r\n                    <Grid item>\r\n                      <Link to=\"/login\">Already have an account? Login</Link>\r\n                    </Grid>\r\n                  </Grid>\r\n                </form>\r\n              </div>\r\n            </Container>\r\n      </React.Fragment>\r\n  );\r\n}","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\services\\apiservice.js",[],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\book.jsx",[],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\orders.jsx",["106"],"import React,{useState, useContext, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Header from './header';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport {getOrderBookApi} from '../services/apiservice';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: '90vh',\r\n  },\r\n  bookContainer:{\r\n    display: 'grid',\r\n    gridColumnGap: '30px',\r\n    gridRowGap: '30px',\r\n    gridTemplateColumns: 'repeat(auto-fit,minmax(200px,1fr))',\r\n    padding: '10px'\r\n  },\r\n  book:{\r\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n    textAlign:'center'\r\n  },\r\n  action:{\r\n    display:'flex',\r\n    flexDirection:'row-reverse',\r\n    padding:\"10px 10px\"\r\n  }\r\n});\r\n\r\n\r\n\r\nexport default function BookOrders() {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = useState([]);\r\n  useEffect(() => {\r\n    fetchOrderDetails()\r\n  },[])\r\n\r\n  const fetchOrderDetails=()=>{\r\n    getOrderBookApi(`GetOrderByUserCode?userCode=${localStorage.getItem('userCode')}`)\r\n    .then(response=>{\r\n      setRows(response)\r\n    },error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header/>\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n                <TableCell align={'center'}>\r\n                  Order Id\r\n                </TableCell>\r\n                <TableCell align={'center'}>\r\n                  Book code\r\n                </TableCell>\r\n                <TableCell align={'center'}>\r\n                  Price\r\n                </TableCell>\r\n                <TableCell align={'center'}>\r\n                  Quantity\r\n                </TableCell>\r\n                <TableCell align={'center'}>\r\n                  Total\r\n                </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                      <TableCell key={row.OrderId} align={'center'}>\r\n                        {row.OrderId}\r\n                      </TableCell>\r\n                      <TableCell key={row.book} align={'center'}>\r\n                        {row.book}\r\n                      </TableCell>\r\n                      <TableCell key={row.price} align={'center'}>\r\n                        {row.price}\r\n                      </TableCell>\r\n                      <TableCell key={row.quantity} align={'center'}>\r\n                        {row.quantity}\r\n                      </TableCell>\r\n                      <TableCell key={`Total=${row.OrderId}`} align={'center'}>\r\n                        {row.price * row.quantity}\r\n                      </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\utils\\constants.js",[],["107","108"],"C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\addBook.jsx",["109","110","111","112","113"],"import React,{useState, useContext, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {getApiByCategory} from '../services/apiservice';\r\nimport {postApi, getApi} from '../services/apiservice';\r\nimport {stateContext} from '../context';\r\nimport {setIsLoading} from '../context/action'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n/**\r\n * Styles declartion for Add book component\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(0.5)\r\n  },\r\n  fields: {\r\n    backgroundColor: '#FFFFFF',\r\n    margin: theme.spacing(0.5)\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    width:\"100%\"\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  }\r\n}));\r\n\r\n/**\r\n * Declartion of Add book component\r\n * @param {*} param0 \r\n */\r\nexport default function AddBook({history,isOpen,close}) {\r\n  // Variable declartion like open, title, author, publisher, description, price and categories\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(isOpen);\r\n  const [title, setTitle] = useState('');\r\n  const [author, setAuthor] = useState('');\r\n  const [publisher, setPublisher] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [price, setPrice] = useState(0);\r\n  const [categories, setCategories] = useState([]);\r\n  const [category, setCategory] = useState(-1);\r\n  const context = useContext(stateContext);\r\n  const [catType, setCatType] = useState('');\r\n  const options = [];\r\n\r\n  /**\r\n   * Method ti close Add book dialog\r\n   */\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    close();\r\n  };\r\n\r\n  /**\r\n   * Useeffect method is executed only when the component  isloaded and when the isOpen value is changed\r\n   */\r\n  useEffect(() => {\r\n    setOpen(isOpen)\r\n    fetchBooksCategories()\r\n  }, [isOpen])\r\n\r\n  // Useffect is executed only when component is loaded fetches all the categories\r\n  useEffect(() => {\r\n    fetchBooksCategories();\r\n  }, [])\r\n\r\n  /**\r\n   * Method to fetch book categories\r\n   */\r\n  // const fetchBooksCategories=()=>{\r\n  //   getApi('GetAllCategories')\r\n  //   .then(response=>{\r\n  //     setCategories(response);\r\n  //   },error => {\r\n  //     console.log(error);\r\n  //   })\r\n  // }\r\n\r\n  /**\r\n   * Form submit method to save the book\r\n   * @param {*} event \r\n   */\r\n  const saveBook= async (event)=>{\r\n    event.preventDefault();\r\n    try{\r\n        context.dispatch(setIsLoading(true));\r\n        handleClose();\r\n        const bookItem={\r\n          Title: title,\r\n          Author: author,\r\n          Description:description,\r\n          Publisher:publisher,\r\n          CatId:category,\r\n          Price: Number(price)\r\n        }\r\n        const response= await postApi('SaveBook',bookItem);\r\n        context.dispatch(setIsLoading(false));\r\n    } catch(error){\r\n      context.dispatch(setIsLoading(false));\r\n    }\r\n  }\r\n\r\n  const fetchBooksCategories=()=>{\r\n    let allData;\r\n    getApiByCategory('GetAllCategories')\r\n    .then(response=>{\r\n      allData = response;\r\n      for(let i=0;i<allData.length;i++) {\r\n        options.push({\r\n          value: allData[i].catId,\r\n          label: allData[i].name\r\n        });\r\n      }\r\n    },error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n  /**\r\n   * Method to handle the change in category selected\r\n   * @param {*} argEvent \r\n   */\r\n  const handleChangeInCategory=argEvent=>{\r\n    setCategory(argEvent.target.value);\r\n  }\r\n\r\n\r\n  const handleChangeInCatType = (event) => {\r\n    setCatType(event.label);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dialog\r\n        fullWidth={true}\r\n        maxWidth={'sm'}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"max-width-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"max-width-dialog-title\">New Book</DialogTitle>\r\n        <DialogContent>\r\n          {/* FOrm for add book */}\r\n        <form className={classes.form} onSubmit={saveBook}>\r\n                  <Grid container spacing={2}>\r\n                    {/* Input for book title */}\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        name=\"Title\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"Title\"\r\n                        value={title}\r\n                        onChange={(e)=>setTitle(e.target.value)}\r\n                        autoFocus\r\n                        label=\"Title\"\r\n                      />\r\n                    </Grid>\r\n                    {/* Input for Authot */}\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        name=\"author\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"author\"\r\n                        value={author}\r\n                        onChange={(e)=>setAuthor(e.target.value)}\r\n                        autoFocus\r\n                        label=\"Author\"\r\n                      />\r\n                    </Grid>\r\n                    {/* Input for Publisher */}\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        name=\"publisher\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"publisher\"\r\n                        value={publisher}\r\n                        onChange={(e)=>setPublisher(e.target.value)}\r\n                        autoFocus\r\n                        label=\"Publisher\"\r\n                      />\r\n                    </Grid>\r\n                    {/* Input for book description */}\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        name=\"description\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"description\"\r\n                        value={description}\r\n                        onChange={(e)=>setDescription(e.target.value)}\r\n                        autoFocus\r\n                        label=\"Description\"\r\n                      />\r\n                    </Grid>\r\n                    {/* Input select for Book category */}\r\n                    <Grid item xs={12} sm={12}>\r\n                    <FormControl fullWidth variant=\"outlined\" className={classes.formControl}>\r\n                        <InputLabel id=\"demo-simple-select-outlined-label\">Category</InputLabel>\r\n                          <Select\r\n                            labelId=\"demo-simple-select-outlined-label\"\r\n                            id=\"demo-simple-select-outlined\"\r\n                            value={category}\r\n                            onChange={handleChangeInCategory}\r\n                            label=\"Category\"\r\n                          >\r\n                            {\r\n                              categories.length>0&& categories.map((item,index)=>(\r\n                                <MenuItem key={`Book-${item.catId}-${index}`} value={item.catId}>{item.name}</MenuItem>\r\n                              ))\r\n                            }\r\n                          </Select>\r\n                      </FormControl>\r\n                    </Grid>\r\n                    {/* Input for Price of the book */}\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        name=\"price\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"price\"\r\n                        value={price}\r\n                        onChange={(e)=>setPrice(e.target.value)}\r\n                        autoFocus\r\n                        label=\"Price\"\r\n                      />\r\n                    </Grid>\r\n                    {/* Button to save the book */}\r\n                    <Grid item xs={12} sm={12}>\r\n                    <Select className={classes.formControl}\r\n                        value={catType}\r\n                        onChange={handleChangeInCatType}\r\n                        options={options}\r\n                    />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12}>\r\n                        <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>\r\n                            Save\r\n                        </Button>\r\n                    </Grid>\r\n              </Grid>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\purchaseBook.jsx",["114"],"import React,{useState, useContext, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {postApi} from '../services/apiservice';\r\nimport {stateContext} from '../context';\r\nimport {setIsLoading} from '../context/action'\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {setPurchaseItem} from \"../context/action\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(0.5)\r\n  },\r\n  fields: {\r\n    backgroundColor: '#FFFFFF',\r\n    margin: theme.spacing(0.5)\r\n  }\r\n}));\r\n\r\nexport default function PurchaseBook({isOpen,book,close}) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(isOpen);\r\n  const [title] = useState(book.title||'');\r\n  const [price, setPrice] = useState(book.price||0);\r\n  const [id] = useState(book.bookId||'');\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [total, setTotal] = useState(0);\r\n  const [creditCardNo, setcreditCardNo] = useState('');\r\n  const context = useContext(stateContext);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    close();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setOpen(isOpen)\r\n  }, [isOpen])\r\n\r\n  useEffect(() => {\r\n    setTotal(price*quantity);\r\n  }, [quantity,price])\r\n\r\n  const saveBook= async (event)=>{\r\n    event.preventDefault();\r\n    try{\r\n        context.dispatch(setIsLoading(true));\r\n        const order={\r\n          CreditCard:creditCardNo,\r\n          OrderDateAndTime: new Date(),\r\n          BookCode:id,\r\n          UserCode:localStorage.getItem('userCode')||'',\r\n          Price: price,\r\n          Quantity: quantity,\r\n          BookName: title\r\n        }\r\n        context.dispatch(setPurchaseItem(order));\r\n        context.dispatch(setIsLoading(false));\r\n        close(true);\r\n    } catch(error){\r\n      context.dispatch(setIsLoading(false));\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dialog\r\n        fullWidth={true}\r\n        maxWidth={'sm'}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"max-width-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"max-width-dialog-title\">Purchase Book</DialogTitle>\r\n        <DialogContent>\r\n        <form className={classes.form} onSubmit={saveBook}>\r\n                  <Grid container spacing={2}>\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        name=\"Title\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"Title\"\r\n                        value={title}\r\n                        readOnly={true}\r\n                        label=\"Title\"\r\n                      />\r\n                    </Grid>\r\n                  <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        name=\"creditCardNo\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"creditCardNo\"\r\n                        value={creditCardNo}\r\n                        onChange={(e)=>setcreditCardNo(e.target.value)}\r\n                        readOnly={true}\r\n                        label=\"Credit Card No.\"\r\n                      />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        name=\"price\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"price\"\r\n                        value={price}\r\n                        onChange={(e)=>setPrice(e.target.value)}\r\n                        autoFocus\r\n                        label=\"Price\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        name=\"quantity\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"quantity\"\r\n                        value={quantity}\r\n                        onChange={(e)=>setQuantity(e.target.value)}\r\n                        autoFocus\r\n                        label=\"Quantity\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12}>\r\n                      <TextField\r\n                        name=\"total\"\r\n                        className={classes.fields}\r\n                        variant=\"outlined\"\r\n                        required\r\n                        fullWidth\r\n                        id=\"total\"\r\n                        value={total}\r\n                        label=\"Total\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={12}>\r\n                        <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>\r\n                            Save\r\n                        </Button>\r\n                    </Grid>\r\n              </Grid>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\borrowBook.jsx",["115","116"],"import React,{useState, useContext, useEffect} from 'react';\r\nimport 'date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport {postApi} from '../services/apiservice';\r\nimport {stateContext} from '../context';\r\nimport {setIsLoading} from '../context/action'\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from '@material-ui/pickers';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n/**\r\n * Styles for borrow book component\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(0.5)\r\n  },\r\n  fields: {\r\n    backgroundColor: '#FFFFFF',\r\n    margin: theme.spacing(0.5)\r\n  }\r\n}));\r\n\r\nvar d = new Date();\r\nd.setDate(d.getDate()+parseInt(14));\r\n\r\n/**\r\n * Borrow book component declaration\r\n * @param {*} param0 \r\n */\r\nexport default function BorrowBook({isOpen,book,close}) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(isOpen);\r\n  const [issueDate, setIssueDate] = useState(new Date());\r\n  const [returnDate, setReturnDate] = useState(d);\r\n  const context = useContext(stateContext);\r\n\r\n  /**\r\n   * Method to close borrow book\r\n   */\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    close();\r\n  };\r\n\r\n  // Useeffect run when component loads for the first time and when isOpen variable changes\r\n  useEffect(() => {\r\n    console.log(book);\r\n    setOpen(isOpen)\r\n  }, [isOpen])\r\n\r\n\r\n  /**\r\n   * Mathod to save borrowed book\r\n   * @param {*} event \r\n   */\r\n  const saveBorrowedBook= async (event)=>{\r\n    event.preventDefault();\r\n    try{\r\n        context.dispatch(setIsLoading(true));\r\n        handleClose();\r\n        const borrow={\r\n          UserCode:localStorage.getItem('userCode')||'',\r\n          BookCode:book.bookCode,\r\n          BorrowingDate: issueDate,\r\n          ReturnDate: returnDate\r\n        }\r\n        const response= await postApi('SaveLoan',borrow);\r\n        context.dispatch(setIsLoading(false));\r\n        close();\r\n    } catch(error){\r\n      context.dispatch(setIsLoading(false));\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Dialog\r\n        fullWidth={true}\r\n        maxWidth={'sm'}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"max-width-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"max-width-dialog-title\">Borrow Book</DialogTitle>\r\n        <DialogContent>\r\n          {/* Form for borrow book */}\r\n        <form className={classes.form} onSubmit={saveBorrowedBook}>\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <Grid container justify=\"space-around\">\r\n        {/* Header for borrow book */}\r\n          <Grid item xs={12} sm={12}>\r\n            {/* Book name */}\r\n             <Typography variant=\"body1\" color=\"textPrimary\" component=\"h3\">{book.title}</Typography>\r\n             {/* Book author name */}\r\n             <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">By - {book.author}</Typography>\r\n          </Grid>\r\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            {/* Date input for borrowed date */}\r\n                  <Grid item xs={12}>\r\n                      <KeyboardDatePicker\r\n                          disableToolbar\r\n                          variant=\"outlined\"\r\n                          format=\"dd/MM/yyyy\"\r\n                          margin=\"normal\"\r\n                          id=\"date-picker-inline\"\r\n                          label=\"Issued Date\"\r\n                          value={issueDate}\r\n                          fullWidth\r\n                          readOnly={true}\r\n                          onChange={setIssueDate}\r\n                          KeyboardButtonProps={{\r\n                            'aria-label': 'change date',\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                {/* date selector for book return date */}\r\n                  <Grid item xs={12}>\r\n                      <KeyboardDatePicker\r\n                          disableToolbar\r\n                          variant=\"outlined\"\r\n                          format=\"dd/MM/yyyy\"\r\n                          margin=\"normal\"\r\n                          id=\"date-picker-inline\"\r\n                          label=\"Return Date\"\r\n                          value={returnDate}\r\n                          fullWidth\r\n                          readOnly={true}\r\n                          onChange={setReturnDate}\r\n                          KeyboardButtonProps={{\r\n                            'aria-label': 'change date',\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                </MuiPickersUtilsProvider>\r\n              {/* button to confirm the borrowed book */}\r\n                <Grid item xs={12} sm={12}>\r\n                        <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>\r\n                            Save\r\n                        </Button>\r\n                </Grid>\r\n      </Grid>\r\n    </MuiPickersUtilsProvider>\r\n          </form>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\paymentGateway.jsx",["117"],"import React,{useState, useEffect, useContext} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport PayPal from './paypall';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    dialogBody:{\r\n      padding:\"20px 20px\"\r\n    },\r\n    action:{\r\n      display:\"flex\",\r\n      justifyContent:\"space-between\"\r\n    }\r\n}));\r\n\r\nexport default function Paymentgateway({isOpen,close}) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(isOpen);\r\n  const [checkout, setCheckout] = useState(false);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    close();\r\n  };\r\n  useEffect(() => {\r\n    setOpen(isOpen)\r\n\r\n    const script = document.createElement('script');\r\n\r\n    script.src = \"https://www.paypal.com/sdk/js?client-id=AW58aRhVgXPmn5TthOz4HG_4JD1xb02GERoe6r8bmrRrj2Vgfm4cJbd-x_9hqAe5YBux2j0M5inRGjX4&currency=SGD\";\r\n    script.async = true;\r\n\r\n    document.body.appendChild(script);\r\n\r\n    return () => {\r\n      document.body.removeChild(script);\r\n    }\r\n  }, [isOpen])\r\n    \r\n  return (\r\n    <React.Fragment>\r\n      <Dialog\r\n        fullWidth={true}\r\n        maxWidth={'sm'}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"max-width-dialog-title\" \r\n      >\r\n        <DialogTitle id=\"max-width-dialog-title\">Payment Gateway</DialogTitle>\r\n        <DialogContent  className={classes.dialogBody}>\r\n            <h3>Hi. Do you want to proceed to checkout?</h3>\r\n            <div className={classes.action}>\r\n              {checkout ? (\r\n                <PayPal/>\r\n               ) : (\r\n                 <div>\r\n                  <Button fullWidth variant=\"contained\" color=\"primary\" onClick={handleClose}>Cancel</Button>\r\n                  <Button fullWidth variant=\"contained\" color=\"primary\" onClick={() => {\r\n                    setCheckout(true);\r\n                  }}>Checkout</Button>\r\n              </div>\r\n               )}\r\n            </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </React.Fragment>\r\n  );\r\n\r\n}","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\loans.jsx",["118","119"],"import React,{useState, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Header from './header';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport {getApi, getOrderBookApi} from '../services/apiservice';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: '90vh',\r\n  },\r\n  bookContainer:{\r\n    display: 'grid',\r\n    gridColumnGap: '30px',\r\n    gridRowGap: '30px',\r\n    gridTemplateColumns: 'repeat(auto-fit,minmax(200px,1fr))',\r\n    padding: '10px'\r\n  },\r\n  book:{\r\n    backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n    textAlign:'center'\r\n  },\r\n  action:{\r\n    display:'flex',\r\n    flexDirection:'row-reverse',\r\n    padding:\"10px 10px\"\r\n  }\r\n});\r\n\r\n\r\n\r\nexport default function LoanedBooks() {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = useState([]);\r\n  useEffect(() => {\r\n    fetchOrderDetails()\r\n  },[])\r\n\r\n  const formatedDate=(date)=>{\r\n    return new Date(date).toLocaleDateString();\r\n  }\r\n\r\n  const fetchOrderDetails=()=>{\r\n    getApi(`GetLoanByUserCode?userCode=${localStorage.getItem('userCode')}`)\r\n    .then(response=>{\r\n      response.forEach(item=>{\r\n        item.borrowingDate= formatedDate(item.borrowingDate);\r\n        item.returnDate= formatedDate(item.borrowingDate);\r\n      })\r\n      setRows(response)\r\n    },error => {\r\n      console.log(error);\r\n    })\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Header/>\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n                <TableCell align={'center'}>\r\n                  Loan Id\r\n                </TableCell>\r\n                <TableCell align={'center'}>\r\n                  Book Code\r\n                </TableCell>\r\n                <TableCell align={'center'}>\r\n                  Borroed Date\r\n                </TableCell>\r\n                <TableCell align={'center'}>\r\n                  Return date\r\n                </TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows.map((row) => {\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                      <TableCell key={row.loanId} align={'center'}>\r\n                        {row.loanId}\r\n                      </TableCell>\r\n                      <TableCell key={row.bookCode} align={'center'}>\r\n                        {row.bookCode}\r\n                      </TableCell>\r\n                      <TableCell key={row.borrowingDate} align={'center'}>\r\n                        {row.borrowingDate}\r\n                      </TableCell>\r\n                      <TableCell key={row.returnDate} align={'center'}>\r\n                        {row.returnDate}\r\n                      </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Paper>\r\n    </React.Fragment>\r\n  );\r\n}","C:\\Users\\PushkarBhadur\\Documents\\Prototyping\\library-managment\\src\\components\\paypall.jsx",["120","121","122"],"import React,{useEffect, useRef, useContext} from 'react';\r\nimport {postApi} from '../services/apiservice';\r\nimport {stateContext} from '../context';\r\nimport {setPaymentOpen} from '../context/action'\r\nimport Notify, {AlertTypes} from '../services/notify';\r\n\r\nexport default function PayPal() {\r\n\r\n    const paypal = useRef()\r\n    const context = useContext(stateContext);\r\n\r\n    useEffect(() => {\r\n        window.paypal.Buttons({\r\n            createOrder: (data, actions, error) => {\r\n                return actions.order.create({\r\n                    intent: \"CAPTURE\",\r\n                    purchase_units: [\r\n                        {\r\n                            description: context.state.purchasedBook.BookName,\r\n                            amount: {\r\n                                currency_code: \"SGD\",\r\n                                value: context.state.purchasedBook.Price * context.state.purchasedBook.Quantity\r\n                            }\r\n                        }\r\n                    ]\r\n                })\r\n            },\r\n            onApprove: async (data, actions) => {\r\n                const order = await actions.order.capture();\r\n                const orderResponse = await postApi('SaveOrder', context.state.purchasedBook);\r\n                context.dispatch(setPaymentOpen(false));\r\n                Notify.sendNotification('Successfully placed order', AlertTypes.success)\r\n            },\r\n            onError: (error) => {\r\n                console.log(error);\r\n            }\r\n        }).render(paypal.current);\r\n    }, [])\r\n    return (\r\n        <div>\r\n            <div ref={paypal}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\n",{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":127,"column":6,"nodeType":"129","endLine":127,"endColumn":8,"suggestions":"130"},{"ruleId":"127","severity":1,"message":"131","line":141,"column":6,"nodeType":"129","endLine":141,"endColumn":16,"suggestions":"132"},{"ruleId":"133","severity":1,"message":"134","line":94,"column":15,"nodeType":"135","messageId":"136","endLine":94,"endColumn":23},{"ruleId":"133","severity":1,"message":"137","line":1,"column":25,"nodeType":"135","messageId":"136","endLine":1,"endColumn":35},{"ruleId":"123","replacedBy":"138"},{"ruleId":"125","replacedBy":"139"},{"ruleId":"133","severity":1,"message":"140","line":8,"column":18,"nodeType":"135","messageId":"136","endLine":8,"endColumn":24},{"ruleId":"133","severity":1,"message":"141","line":53,"column":22,"nodeType":"135","messageId":"136","endLine":53,"endColumn":35},{"ruleId":"127","severity":1,"message":"142","line":73,"column":6,"nodeType":"129","endLine":73,"endColumn":14,"suggestions":"143"},{"ruleId":"127","severity":1,"message":"142","line":78,"column":6,"nodeType":"129","endLine":78,"endColumn":8,"suggestions":"144"},{"ruleId":"133","severity":1,"message":"134","line":109,"column":15,"nodeType":"135","messageId":"136","endLine":109,"endColumn":23},{"ruleId":"133","severity":1,"message":"145","line":7,"column":9,"nodeType":"135","messageId":"136","endLine":7,"endColumn":16},{"ruleId":"127","severity":1,"message":"146","line":59,"column":6,"nodeType":"129","endLine":59,"endColumn":14,"suggestions":"147"},{"ruleId":"133","severity":1,"message":"134","line":77,"column":15,"nodeType":"135","messageId":"136","endLine":77,"endColumn":23},{"ruleId":"133","severity":1,"message":"137","line":1,"column":36,"nodeType":"135","messageId":"136","endLine":1,"endColumn":46},{"ruleId":"133","severity":1,"message":"148","line":11,"column":17,"nodeType":"135","messageId":"136","endLine":11,"endColumn":32},{"ruleId":"127","severity":1,"message":"149","line":45,"column":5,"nodeType":"129","endLine":45,"endColumn":7,"suggestions":"150"},{"ruleId":"133","severity":1,"message":"151","line":29,"column":23,"nodeType":"135","messageId":"136","endLine":29,"endColumn":28},{"ruleId":"133","severity":1,"message":"152","line":30,"column":23,"nodeType":"135","messageId":"136","endLine":30,"endColumn":36},{"ruleId":"127","severity":1,"message":"153","line":38,"column":8,"nodeType":"129","endLine":38,"endColumn":10,"suggestions":"154"},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'context' and 'fetchBooks'. Either include them or remove the dependency array.","ArrayExpression",["157"],"React Hook useEffect has missing dependencies: 'books' and 'context'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDisplayBooks' needs the current value of 'books'.",["158"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'useContext' is defined but never used.",["155"],["156"],"'getApi' is defined but never used.","'setCategories' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchBooksCategories'. Either include it or remove the dependency array.",["159"],["160"],"'postApi' is defined but never used.","React Hook useEffect has a missing dependency: 'book'. Either include it or remove the dependency array.",["161"],"'getOrderBookApi' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchOrderDetails'. Either include it or remove the dependency array.",["162"],"'order' is assigned a value but never used.","'orderResponse' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'context'. Either include it or remove the dependency array.",["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [context, fetchBooks]",{"range":"178","text":"179"},"Update the dependencies array to be: [books, category, context]",{"range":"180","text":"181"},"Update the dependencies array to be: [fetchBooksCategories, isOpen]",{"range":"182","text":"183"},"Update the dependencies array to be: [fetchBooksCategories]",{"range":"184","text":"185"},"Update the dependencies array to be: [book, isOpen]",{"range":"186","text":"187"},"Update the dependencies array to be: [fetchOrderDetails]",{"range":"188","text":"189"},"Update the dependencies array to be: [context]",{"range":"190","text":"191"},[3673,3675],"[context, fetchBooks]",[4099,4109],"[books, category, context]",[2371,2379],"[fetchBooksCategories, isOpen]",[2523,2525],"[fetchBooksCategories]",[1727,1735],"[book, isOpen]",[1237,1239],"[fetchOrderDetails]",[1545,1547],"[context]"]